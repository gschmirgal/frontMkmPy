{% extends 'base.html.twig' %}

{% block title %}{{"Cards list - "~expansion.name}} {% endblock %}

{% block body %}
    <h1>{{expansion.name}}</h1>
    
    <div class="d-flex align-items-center gap-3 mb-3">
        <span>Sorting by:</span>
        <div class="btn-group">
            <input type="radio" class="btn-check" name="sort" value="collector_number" id="number" autocomplete="off"
                   onchange="sortCards(this.value)">
            <label class="btn" for="number">Collector Number</label>

            <input type="radio" class="btn-check" name="sort" value="name_asc" id="AZ" autocomplete="off"
                   onchange="sortCards(this.value)">
            <label class="btn" for="AZ">A-Z</label>

            <input type="radio" class="btn-check" name="sort" value="name_desc" id="ZA" autocomplete="off"
                   onchange="sortCards(this.value)">
            <label class="btn" for="ZA">Z-A</label>
        </div>
    </div>
    {{ component('list_cards', {data: cards}) }}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function sortCards(sortType) {
            localStorage.setItem('cardSortPreference', sortType); // Sauvegarder à chaque appel
            
            const cardsContainer = document.querySelector('.row');
            const cards = Array.from(cardsContainer.children);
            
            cards.sort((a, b) => {
                let aValue, bValue;
                
                switch(sortType) {
                    case 'collector_number':
                        // Récupérer le numéro de collectionneur (adapter le sélecteur)
                        aValue = getCollectorNumber(a);
                        bValue = getCollectorNumber(b);
                        return compareNumbers(aValue, bValue);
                        
                    case 'name_asc':
                        aValue = getCardName(a).toLowerCase();
                        bValue = getCardName(b).toLowerCase();
                        return aValue.localeCompare(bValue);
                        
                    case 'name_desc':
                        aValue = getCardName(a).toLowerCase();
                        bValue = getCardName(b).toLowerCase();
                        return bValue.localeCompare(aValue);
                        
                    default:
                        return 0;
                }
            });
            
            // Réorganiser les éléments DOM
            cards.forEach(card => cardsContainer.appendChild(card));
        }
        
        function getCollectorNumber(cardElement) {
            // L'attribut data-collector-number est directement sur l'élément cardElement
            const number = cardElement.dataset.collectorNumber;
            if (number && number !== 'null' && number !== '') {
                return parseInt(number) || 9999;
            }
            return 9999;
        }
        
        function getCardName(cardElement) {
            // L'attribut data-card-name est directement sur l'élément cardElement
            const name = cardElement.dataset.cardName;
            return name ? name.trim() : '';
        }
        
        function compareNumbers(a, b) {
            return a - b;
        }
        
        // Sauvegarder le choix dans localStorage
        function setupSortListeners() {
            document.querySelectorAll('input[name="sort"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    localStorage.setItem('cardSortPreference', this.value);
                });
            });
        }
        
        // Restaurer le choix au chargement
        document.addEventListener('DOMContentLoaded', function() {
            // Configurer les listeners d'événements
            setupSortListeners();
            
            const saved = localStorage.getItem('cardSortPreference');
            
            if (saved) {
                const radio = document.querySelector(`input[value="${saved}"]`);
                if (radio) {
                    radio.checked = true;
                    sortCards(saved);
                }
            } else {
                // Pas de préférence sauvée, utiliser collector_number par défaut
                const defaultRadio = document.querySelector(`input[value="collector_number"]`);
                if (defaultRadio) {
                    defaultRadio.checked = true;
                }
            }
        });
    </script>
{% endblock %}